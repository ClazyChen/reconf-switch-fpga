
#include <core.rp4>
#include <v1model.rp4>

#define EXTRACT_LEN 100

stream packet_seg = packet[EXTRACT_LEN];

headers {
	header ethernet_t {
		bit<48> dstAddr;
		bit<48> srcAddr;
		bit<16> etherType;
		implicit parser(etherType) {
			0x0800:	ipv4_t;
			default: accept;
		}
	}

	header ipv4_t {
		bit<4>    version;
		bit<4>    ihl;
		bit<8>    diffserv;
		bit<16>   totalLen;
		bit<16>   identification;
		bit<3>    flags;
		bit<13>   fragOffset;
		bit<8>    ttl;
		bit<8>    protocol;
		bit<16>   hdrChecksum;
		bit<32> srcAddr;
		bit<32> dstAddr;
		implicit parser(protocol) {
			6: tcp_t;
			default: accept;
		}
	}

	header tcp_t {
		bit<16> srcPort;
		bit<16> dstPort;
		bit<32> seqNo;
		bit<32> ackNo;
		bit<4>  dataOffset;
		bit<4>  res;
		bit<1>  cwr;
		bit<1>  ece;
		bit<1>  urg;
		bit<1>  ack;
		bit<1>  psh;
		bit<1>  rst;
		bit<1>  syn;
		bit<1>  fin;
		bit<16> window;
		bit<16> checksum;
		bit<16> urgentPtr;
		implicit parser() {
			default: accept;
		}
	}
}

structs {
	struct metadata_t {

	};

	struct ingress_variable_t {
		register<bit<1>>(4096) bloom_filter_1;
		register<bit<1>>(4096) bloom_filter_2;
		bit<32> reg_pos_one;
		bit<32> reg_pos_two;
		bit<1> reg_val_one;
		bit<1> reg_val_two;
		bit<1> direction;
	};

	struct egress_variable_t {

	};

	struct header_sequence_t {
			ethernet_t   ethernet;
	    ipv4_t       ipv4;
	    tcp_t        tcp;
	};
}

metadata_t meta;
ingress_variable_t iv;
egress_variable_t ev;
header_sequence_t hs;

actions {
	action verify_checksum() {
		return
			this.hdrChecksum == HashAlgorithm.csum16(this.version,
													this.ihl,
													this.diffserv,
													this.totalLen,
													this.identification,
													this.flags,
													this.fragOffset,
													this.ttl,
													this.protocol,
													this.srcAddr,
													this.dstAddr);
	}

	action update_checksum() {
		this.hdrChecksum = HashAlgorithm.csum16(this.version,
										this.ihl,
										this.diffserv,
										this.totalLen,
										this.identification,
										this.flags,
										this.fragOffset,
										this.ttl,
										this.protocol,
										this.srcAddr,
										this.dstAddr);
	}

	action ipv4_forward(bit<48> dstAddr, bit<9> port) {
		copy_field(port, standard_metadata.egress_spec);
		copy_field(hs.ethernet_t.dstAddr, hs.ethermet_t.srcAddr);
		copy_field(dstAddr, hs.ethernet.dstAddr);
		decrement(hs.ipv4.ttl);
		goto tcp_valid_s;
	}

	action direction_init() {
		iv.direction = 0;
		goto check_ports_s;
	}

	action set_direction(bit<1> dir) {
		copy_field(dir, iv.direction);
		goto filter_s;
	}

	action block_3() {
		hash(iv.reg_pos_one, HashAlgorithm.crc16, (bit<32>)0, {hs.ipv4.dstAddr,
																   hs.ipv4.srcAddr,
																   hs.tcp.dstPort,
																   hs.tcp.srcPort,
																   hs.ipv4.protocol},
																   (bit<32>)4096);
		hash(iv.reg_pos_one, HashAlgorithm.crc16, (bit<32>)0, {hs.ipv4.dstAddr,
																   hs.ipv4.srcAddr,
																   hs.tcp.dstPort,
																   hs.tcp.srcPort,
																   hs.ipv4.protocol},
																   (bit<32>)4096);
	}

	action block_4() {
		hash(iv.reg_pos_one, HashAlgorithm.crc16, (bit<32>)0, {hs.ipv4.srcAddr,
																   hs.ipv4.dstAddr,
																   hs.tcp.srcPort,
																   hs.tcp.dstPort,
																   hs.ipv4.protocol},
																   (bit<32>)4096);
		hash(iv.reg_pos_one, HashAlgorithm.crc16, (bit<32>)0, {hs.ipv4.srcAddr,
																   hs.ipv4.dstAddr,
																   hs.tcp.srcPort,
																   hs.tcp.dstPort,
																   hs.ipv4.protocol},
																   (bit<32>)4096);
	}

	action block_5() {
		iv.bloom_filter_1.write(iv.reg_pos_one, 1);
		iv.bloom_filter_2.write(iv.reg_pos_two, 1);
	}

	action block_6() {
		iv.bloom_filter_1.read(iv.reg_val_one, iv.reg_pos_one);
  	iv.bloom_filter_2.read(iv.reg_val_two, iv.reg_pos_two);
	}

	action block_7() {
		drop();
	}


	action drop() {
		extern mark_to_drop(standard_metadata);
	}
}

tables {
	table ipv4_lpm {
        key = {
            hs.ipv4.dstAddr: lpm;
        }
        size = 1024;
    }

	table check_ports {
        key = {
            standard_metadata.ingress_port: exact;
            standard_metadata.egress_spec: exact;
        }
        size = 1024;
    }
}

control rP4_Ingress {

	stage ipv4_lpm_s {
		parser{
			hs.ipv4 = packet_seg.extract(ipv4_t);
		}
		matcher{
			ipv4_lpm;
		}
		executer{
			2b00: ipv4_forward();
			2b01: drop();
			default: drop();
		}
	}

	stage tcp_valid_s {
		parser{
			hs.tcp = packet_seg.extract(tcp_t);
		}
		matcher{

		}
		executer{
			default: direction_init();
		}
	}

	stage check_ports_s {
		parser{

		}
		matcher{
			check_ports;
		}
		executer{
			1b0: set_direction();
			default: None;
		}
	}

	stage filter_s {
		parser{

		}
		matcher{
			{(iv.direction==0), (iv.direction==1), (hs.tcp.syn==1), (iv.reg_val_one!=1), (iv.reg_val_two!=1)}
		}
		executer{
			5b1x1xx: block_4(); block_5(); goto rP4_Egress;
			5b1x0xx: block_4(); goto rP4_Egress;
			5b00xxx: block_3(); goto rP4_Egress;
			5b01x00: block_3(); block_6(); goto rP4_Egress;
			5b01x1x: block_3(); block_6(); block_7(); goto rP4_Egress;
			5b01xx1: block_3(); block_6(); block_7(); goto rP4_Egress;
			default: goto rP4_Egress;
		}
	}
}

control rP4_Egress{

}

user_funcs {
	func ipv4_forward {
		rP4_Ingress.ipv4_lpm_s
	}

	func tcp_firewall {
		rP4_Ingress.tcp_valid_s;
		rP4_Ingress.check_ports_s;
		rP4_Ingress.filter_s;
	}
	ingress_entry: rP4_Ingress.ipv4_lpm_s; // which stage the packet should pass first
	egress_entry:;
}
